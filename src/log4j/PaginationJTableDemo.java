/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package log4j;

/**
 *
 * @author kamal64
 */
import java.beans.PropertyChangeEvent;  
import java.beans.PropertyChangeListener;  
import java.sql.Connection;  
import java.sql.DriverManager;  
import java.sql.ResultSet;  
import java.sql.Statement;  
import java.util.List;  
import java.util.Random;  
import java.util.Vector;  
import javax.swing.JDialog;  
import javax.swing.JLabel;  
import javax.swing.JTable;  
import javax.swing.SwingWorker;  
import javax.swing.table.DefaultTableModel;  
  
/** 
 * 
 * @author kevin 
 */  
public class PaginationJTableDemo extends javax.swing.JFrame {  
    private DefaultTableModel model;  
//        private PaginationTableModel model;  
   private String[] headers = {"Date", "level", "message"};  
    private Vector userVector = new Vector();  
    private static int rowPerPage = 30;  
    private int totalPage;  
    private int totalRow;  
    private int currentPage = 0;  
    private String sqlm;  
  
    /** Creates new form PaginationJTableDemo */  
    public PaginationJTableDemo() {  
        initComponents();  
        model = new DefaultTableModel(headers, 10);  
  
//        DataProcessFactory pft=  new DataProcessFactory();  
//        model = new PaginationTableModel(headers, pft);  
        totalRow = getCount("select count(level) from Test1");  
        this.sqlm = "select * from Test1 where level='ERROR'";  
        this.totalPage = (totalRow+rowPerPage-1)/rowPerPage;  
        this.contentTable.setModel(model);  
        showPage(1);  
    }  
  
    /** This method is called from within the constructor to 
     * initialize the form. 
     * WARNING: Do NOT modify this code. The content of this method is 
     * always regenerated by the Form Editor. 
     */  
    @SuppressWarnings("unchecked")  
    // <editor-fold defaultstate="collapsed" desc="Generated Code">  
    private void initComponents() {  
  
        jPanel1 = new javax.swing.JPanel();  
        prevPageBtn = new javax.swing.JButton();  
        nextBtn = new javax.swing.JButton();  
        firstBtn = new javax.swing.JButton();  
        lastBtn = new javax.swing.JButton();  
        jLabel1 = new javax.swing.JLabel();  
        jLabel2 = new javax.swing.JLabel();  
        jPanel2 = new javax.swing.JPanel();  
        jScrollPane1 = new javax.swing.JScrollPane();  
        contentTable = new javax.swing.JTable();  
  
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);  
  
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));  
  
        prevPageBtn.setText("Prev Page");  
        prevPageBtn.addActionListener(new java.awt.event.ActionListener() {  
            public void actionPerformed(java.awt.event.ActionEvent evt) {  
                prevPageBtnActionPerformed(evt);  
            }  
        });  
        jPanel1.add(prevPageBtn);  
  
        nextBtn.setText("next page");  
        nextBtn.addActionListener(new java.awt.event.ActionListener() {  
            public void actionPerformed(java.awt.event.ActionEvent evt) {  
                nextBtnActionPerformed(evt);  
            }  
        });  
        jPanel1.add(nextBtn);  
  
        firstBtn.setText("first page");  
        firstBtn.addActionListener(new java.awt.event.ActionListener() {  
            public void actionPerformed(java.awt.event.ActionEvent evt) {  
                firstBtnActionPerformed(evt);  
            }  
        });  
        jPanel1.add(firstBtn);  
  
        lastBtn.setText("last page");  
        lastBtn.addActionListener(new java.awt.event.ActionListener() {  
            public void actionPerformed(java.awt.event.ActionEvent evt) {  
                lastBtnActionPerformed(evt);  
            }  
        });  
        jPanel1.add(lastBtn);  
  
        jLabel1.setText("curren:");  
        jPanel1.add(jLabel1);  
        jPanel1.add(jLabel2);  
  
        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);  
  
        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));  
  
        contentTable.setModel(new javax.swing.table.DefaultTableModel(  
            new Object [][] {  
                {null, null, null, null},  
                {null, null, null, null},  
                {null, null, null, null},  
                {null, null, null, null}  
            },  
            new String [] {  
                "Title 1", "Title 2", "Title 3", "Title 4"  
            }  
        ));  
        jScrollPane1.setViewportView(contentTable);  
  
        contentTable.setAutoCreateRowSorter(true);
        jPanel2.add(jScrollPane1);  
  
        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);  
  
        pack();  
    }// </editor-fold>  
  
    private void nextBtnActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:  
       if (currentPage < totalPage) {  
        currentPage = currentPage + 1;  
        showPage(currentPage);  
        this.jLabel2.setText("" + currentPage);  
    }  
    }                                         
  
    private void prevPageBtnActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // TODO add your handling code here:  
            if (currentPage > 1) {  
        currentPage = currentPage - 1;  
        showPage(currentPage);  
        this.jLabel2.setText("" + currentPage);  
    }  
    }                                             
  
    private void firstBtnActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:  
        currentPage =1 ;  
        showPage(currentPage);  
        this.jLabel2.setText("" + currentPage);  
    }                                          
  
    private void lastBtnActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:  
                currentPage = totalPage ;  
        showPage(currentPage);  
        this.jLabel2.setText("" + currentPage);  
    }                                         
  
    /** 
    * @param args the command line arguments 
    */  
    public static void main(String args[]) {  
        java.awt.EventQueue.invokeLater(new Runnable() {  
            public void run() {  
                new PaginationJTableDemo().setVisible(true);  
            }  
        });  
    }  
    private Connection getConnection() {  
        Connection conn = null;  
        try {  
             Class.forName("org.sqlite.JDBC");
            String url = "jdbc:sqlite:C:/sqlite/testDB.db";  
            String user = "";  
            String pwd = "";  
            conn = DriverManager.getConnection(url, user, pwd);  
        } catch (Exception e) {  
            e.printStackTrace();  
        }  
        return conn;  
    }  
       public int getCount( String sql) {  
        int result = 0;  
        try {  
            Connection conn = getConnection();  
            Statement stmt = conn.createStatement();  
//            String sql = "select count(*) from userinfo";  
            ResultSet rs = stmt.executeQuery(sql);  
            if (rs.next()) {  
                result = rs.getInt(1);  
            }  
        } catch (Exception e) {  
            e.printStackTrace();  
        }  
        return result;  
    }  
   private void showPage(int i) {  
       model = new DefaultTableModel() {  
            @Override  
            public boolean isCellEditable(int rows, int column) {  
                return false;  
            }  
        };  
        final int key = model.getRowCount();  
//        DataProcessFactory pft=  new DataProcessFactory();  
//        model = new PaginationTableModel(headers, pft);  
  
        model.setColumnIdentifiers(headers);          
        currentPage = i;  
        System.out.println("Current page is:" + currentPage);  
   
        TableSwingWorker readFromDbWorker =new TableSwingWorker(model,contentTable);  
// JDialog dialog = new JDialog(this, true);  
// dialog.add(new JLabel("loading..."));  
// dialog.pack();  
// readFromDbWorker.addPropertyChangeListener(new SwingWorkerCompletionWaiter(dialog));  
        readFromDbWorker.execute();  
//dialog.setVisible(true);  
  
        System.out.println(readFromDbWorker.isDone()+" rows: "+readFromDbWorker.getTempTableMode().getRowCount());  
//        if(readFromDbWorker.isDone())  
//        this.contentTable.setModel(readFromDbWorker.getTempTableMode());  
        this.contentTable.setModel(model);  
    }  
  
    // Variables declaration - do not modify  
    private javax.swing.JTable contentTable;  
    private javax.swing.JButton firstBtn;  
    private javax.swing.JLabel jLabel1;  
    private javax.swing.JLabel jLabel2;  
    private javax.swing.JPanel jPanel1;  
    private javax.swing.JPanel jPanel2;  
    private javax.swing.JScrollPane jScrollPane1;  
    private javax.swing.JButton lastBtn;  
    private javax.swing.JButton nextBtn;  
    private javax.swing.JButton prevPageBtn;  
    // End of variables declaration  
  
        private class FetchDataFromDBWorker extends  
            SwingWorker<Vector<Vector>, Vector<Vector>> {  
  
        @Override  
        protected Vector<Vector> doInBackground() throws Exception {  
            throw new UnsupportedOperationException("Not supported yet.");  
        }  
              
        }  
class TableSwingWorker extends  
        SwingWorker<DefaultTableModel, Object[]> {  
    private DefaultTableModel tableModel;  
    private DefaultTableModel tempTableMode;  
  
        public DefaultTableModel getTempTableMode() {  
            return tempTableMode;  
        }  
    private boolean loadDone =false;  
    private final JTable contentTable;  
    public TableSwingWorker(DefaultTableModel tableModel,JTable contentTable) {  
        this.tableModel = tableModel;  
        this.contentTable = contentTable;  
        tempTableMode =  new DefaultTableModel() {  
            @Override  
            public boolean isCellEditable(int rows, int column) {  
                return false;  
            }  
        };  
    }  
     @Override  
    protected DefaultTableModel doInBackground() throws Exception {  
//        for (Object[] row = loadData();  
//                 ! isCancelled() && row != null;  
//                 row = loadData()) {  
//            publish((Object[]) row);  
//        }  
        loadData();  
        return tempTableMode;  
    }  
//     @Override  
//    protected void process(List<Object[]> chunks) {  
//        for (Object[] row : chunks) {  
//            tableModel.addRow(row);  
//        }  
//    }  
            @Override  
            protected void done() {  
                String text;  
                int i = -1;  
//                DefaultTableModel  model =null;  
                if(isCancelled()) {  
                    text = "Cancelled";  
                }else{  
                    try{  
                       tempTableMode = get();  
                       System.out.println("indone="+tempTableMode.getRowCount());  
//                       contentTable.setModel(tableModel);  
//                       contentTable.repaint();  
//                        text = (tableModel.getColumnCount()>=0)?"Done":"Disposed";  
                    }catch(Exception ignore) {  
                        ignore.printStackTrace();  
                        text = ignore.getMessage();  
                    }  
                }  
//                System.out.println(key +":"+text+"("+i+"ms)");  
            }  
        private Object[] loadData() {  
                    ResultSet rs = null;  
                     Object[] user = null;  
        try {  
            Connection conn = getConnection();  
            Statement stmt = conn.createStatement();  
            String sql = sqlm +" limit "+(currentPage-1)*rowPerPage+","+rowPerPage;  
            System.out.println(sql);  
            rs = stmt.executeQuery(sql);  
//            model.setCurrentPage(currentPage);  
//            model.setCurrentPage(i);  
//            model.getDataFromDB("select * from vote_user", conn);  
        while (rs.next()) {  
             user = new Object[4];  
            user[0] = rs.getString(1);  
            user[1] =(rs.getString(2));  
            user[2]=(rs.getString(3));  
            tableModel.addRow(user);  
            tempTableMode.addRow(user);  
  
        }  
            loadDone=true;  
    } catch (Exception e) {  
        e.printStackTrace();  
    }  
                        return user;  
        }  
    }  
  
  
 class SwingWorkerCompletionWaiter implements PropertyChangeListener {  
     private JDialog dialog;  
  
     public SwingWorkerCompletionWaiter(JDialog dialog) {  
         this.dialog = dialog;  
     }  
  
     public void propertyChange(PropertyChangeEvent event) {  
         if ("state".equals(event.getPropertyName())  
                 && SwingWorker.StateValue.DONE == event.getNewValue()) {  
             dialog.setVisible(false);  
             dialog.dispose();  
         }  
     }  
 }  
  
}  
  
